"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[9656],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>f});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var i=r.createContext({}),m=function(e){var n=r.useContext(i),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},d=function(e){var n=m(e.components);return r.createElement(i.Provider,{value:n},e.children)},u="mdxType",p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},l=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,i=e.parentName,d=c(e,["components","mdxType","originalType","parentName"]),u=m(t),l=o,f=u["".concat(i,".").concat(l)]||u[l]||p[l]||a;return t?r.createElement(f,s(s({ref:n},d),{},{components:t})):r.createElement(f,s({ref:n},d))}));function f(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,s=new Array(a);s[0]=l;var c={};for(var i in n)hasOwnProperty.call(n,i)&&(c[i]=n[i]);c.originalType=e,c[u]="string"==typeof e?e:o,s[1]=c;for(var m=2;m<a;m++)s[m]=t[m];return r.createElement.apply(null,s)}return r.createElement.apply(null,t)}l.displayName="MDXCreateElement"},4716:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>s,default:()=>p,frontMatter:()=>a,metadata:()=>c,toc:()=>m});var r=t(7462),o=(t(7294),t(3905));const a={},s="CW20",c={unversionedId:"examples/CW20",id:"examples/CW20",title:"CW20",description:"",source:"@site/docs/examples/CW20.mdx",sourceDirName:"examples",slug:"/examples/CW20",permalink:"/cwscript-docs/docs/examples/CW20",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/examples/CW20.mdx",tags:[],version:"current",frontMatter:{},sidebar:"examplesSidebar",next:{title:"Atomic Order",permalink:"/cwscript-docs/docs/examples/Injective/AtomicOrderExample"}},i={},m=[],d={toc:m},u="wrapper";function p(e){let{components:n,...t}=e;return(0,o.kt)(u,(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"cw20"},"CW20"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cwscript",metastring:"showLineNumbers",showLineNumbers:!0},"interface CW20 {\n\n  struct Coin {\n    address: String,\n    amount: U128\n  }\n\n  event Transfer(from: Address, to: Address, amount: Int)\n  event Burn(from: Address, amount: Int)\n  event Mint(to: Address, amount: Int)\n  event Send(from: Address, to: Address, amount: Int)\n  event IncreaseAllowance(owner: Address, spender: Address, amount: Int)\n  event DecreaseAllowance(owner: Address, spender: Address, amount: Int)\n  event TransferFrom(from: Address, to: Address, by: Address, amount: Int)\n  event BurnFrom(from: Address, by: Address, amount: Int)\n  event Log(from: Address, to: Address, by: Address, amount: Int)\n\n  #instantiate(\n    name: String,\n    symbol: String,\n    decimals: U8,\n    initial_balances: CW20.Coin[],\n    mint?: struct MinterResponse {\n      minter: String,\n      cap?: U128\n    }\n  )\n\n  exec #burn(amount: Int)\n  exec #mint(recipient: String)\n  exec #send(contract: String, amount: Int, msg: Binary)\n  exec #increase_allowance(spender: String, amount: Int, expires?: Expiration)\n  exec #decrease_allowance(spender: String, amount: Int, expires?: Expiration)\n  exec #transfer_from(owner: String, recipient: String, amount: Int)\n  exec #burn_from(owner: String, amount: Int)\n  exec #send_from(owner: String, contract: String, amount: Int, msg: Binary)\n\n  query #balance(address: String) -> struct {\n    balance: Int\n  }\n\n  query #token_info() -> struct TokenInfo {\n    name: String,\n    symbol: String,\n    decimals: U8,\n    total_supply: Int,\n  }\n\n  query #minter() -> MinterResponse?\n\n}\n")))}p.isMDXComponent=!0}}]);