"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[6473],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>f});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),l=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=l(e.components);return r.createElement(s.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),u=l(n),m=a,f=u["".concat(s,".").concat(m)]||u[m]||d[m]||o;return n?r.createElement(f,i(i({ref:t},p),{},{components:n})):r.createElement(f,i({ref:t},p))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=m;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c[u]="string"==typeof e?e:a,i[1]=c;for(var l=2;l<o;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},9386:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>c,toc:()=>l});var r=n(7462),a=(n(7294),n(3905));const o={},i="Events",c={unversionedId:"lang/events",id:"lang/events",title:"Events",description:"An event is a special type of structured data that can be emitted by contracts to indicate that something of interest has occured.",source:"@site/docs/lang/events.mdx",sourceDirName:"lang",slug:"/lang/events",permalink:"/cwscript-docs/docs/lang/events",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/lang/events.mdx",tags:[],version:"current",frontMatter:{},sidebar:"langSidebar",previous:{title:"Errors",permalink:"/cwscript-docs/docs/lang/errors"},next:{title:"Execute",permalink:"/cwscript-docs/docs/lang/execute"}},s={},l=[{value:"Defining Events",id:"defining-events",level:2},{value:"The <code>emit</code> Keyword",id:"the-emit-keyword",level:2}],p={toc:l},u="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(u,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"events"},"Events"),(0,a.kt)("p",null,"An ",(0,a.kt)("strong",{parentName:"p"},"event")," is a special type of structured data that can be emitted by contracts to indicate that something of interest has occured. "),(0,a.kt)("p",null,"Since contract entrypoints such as ",(0,a.kt)("inlineCode",{parentName:"p"},"#instantiate")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"exec#")," messages cannot return values normally like functions, they emit events instead, which are stored on-chain and can be picked up by other processes such as event listeners, block explorers, and blockchain indexers."),(0,a.kt)("p",null,"CWScript provides tools which make it easy to parse structured data from emitted events logged from the blockchain. "),(0,a.kt)("h2",{id:"defining-events"},"Defining Events"),(0,a.kt)("p",null,"Custom event types can be defined using the ",(0,a.kt)("inlineCode",{parentName:"p"},"event")," keyword. You can also specify named fields for relevant data you want your event to contain, using the functional syntax for structs."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cwscript"},"event Transfer(sender: Address, recipient: Address, amount: Uint)\n")),(0,a.kt)("h2",{id:"the-emit-keyword"},"The ",(0,a.kt)("inlineCode",{parentName:"h2"},"emit")," Keyword"),(0,a.kt)("p",null,"Events can be emitted using the ",(0,a.kt)("inlineCode",{parentName:"p"},"emit")," keyword inside state-mutating contract entrypoints:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"instantiate"),(0,a.kt)("li",{parentName:"ul"},"exec"),(0,a.kt)("li",{parentName:"ul"},"migrate")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-cwscript"},'contract EmitExample {\n    event SomethingHappened(what: String)\n\n    exec #do_something() {\n        // ... logic\n        emit SomethingHappened("do_something was called!")\n    }\n}\n')))}d.isMDXComponent=!0}}]);