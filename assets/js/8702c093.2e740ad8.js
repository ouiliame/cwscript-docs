"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[5593],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>m});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},s=Object.keys(e);for(a=0;a<s.length;a++)t=s[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(a=0;a<s.length;a++)t=s[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var c=a.createContext({}),p=function(e){var n=a.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},d=function(e){var n=p(e.components);return a.createElement(c.Provider,{value:n},e.children)},l="mdxType",f={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},_=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,s=e.originalType,c=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),l=p(t),_=r,m=l["".concat(c,".").concat(_)]||l[_]||f[_]||s;return t?a.createElement(m,i(i({ref:n},d),{},{components:t})):a.createElement(m,i({ref:n},d))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var s=t.length,i=new Array(s);i[0]=_;var o={};for(var c in n)hasOwnProperty.call(n,c)&&(o[c]=n[c]);o.originalType=e,o[l]="string"==typeof e?e:r,i[1]=o;for(var p=2;p<s;p++)i[p]=t[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}_.displayName="MDXCreateElement"},7371:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>f,frontMatter:()=>s,metadata:()=>o,toc:()=>p});var a=t(7462),r=(t(7294),t(3905));const s={},i="Factory",o={unversionedId:"examples/Terraswap/TerraswapFactory",id:"examples/Terraswap/TerraswapFactory",title:"Factory",description:"",source:"@site/docs/examples/Terraswap/TerraswapFactory.mdx",sourceDirName:"examples/Terraswap",slug:"/examples/Terraswap/TerraswapFactory",permalink:"/docs/examples/Terraswap/TerraswapFactory",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/examples/Terraswap/TerraswapFactory.mdx",tags:[],version:"current",frontMatter:{},sidebar:"examplesSidebar",previous:{title:"Atomic Order",permalink:"/docs/examples/Injective/AtomicOrderExample"},next:{title:"Pair",permalink:"/docs/examples/Terraswap/TerraswapPair"}},c={},p=[],d={toc:p},l="wrapper";function f(e){let{components:n,...t}=e;return(0,r.kt)(l,(0,a.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"factory"},"Factory"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-cwscript",metastring:"showLineNumbers",showLineNumbers:!0},'import * from "./common.cws"\n\ncontract TerraswapFactory {\n\n  error Unauthorized()\n  event UpdateConfig()\n\n  state {\n    config: Config\n    tmp_pair_info: TmpPairInfo\n    pairs[U8]: PairInfo? = None\n    allow_native_tokens[U8[2]]: U8? = None\n  }\n\n  fn query_decimals!(account_addr: address, asset_info: AssetInfo) -> U8 {\n    if asset_info is AssetInfo.#Token {\n      let { contract_addr } = asset_info\n      let token_info = query! CW20(asset_info).#token_info()\n      return token_info.decimals\n    } else {\n      let res = query! $.#native_token_decimals(asset_info.denom)\n      return res.decimals\n    }\n  }\n\n  #instantiate(pair_code_id: U64, token_code_id: U64) {\n    $state.config = Config(token_code_id, pair_code_id, $info.sender)\n  }\n\n  exec #update_config(owner?: String, token_code_id?: U64, pair_code_id?: U64) {\n    if $info.sender != $state.config.owner {\n      fail! Unauthorized()\n    }\n\n    if owner? {\n      $state.config.owner = Address.validate!(owner)\n    }\n\n    if token_code_id? {\n      $state.token_code_id = token_code_id\n    }\n\n    if pair_code_id? {\n      $state.pair_code_id = pair_code_id\n    }\n\n    emit UpdateConfig()\n  }\n\n  reply.success post_instantiate() {\n    let { tmp_pair_info } = $state\n\n    let response = Wasm.Instantiate::parse_response!($data)\n    let pair_contract = response.address\n    let pair_info = query! TerraswapPair(pair_contract).#pair() ~ .token_supply\n    $state.pairs = PairInfo(\n      Address.Canonical!(pair_info.liquidity_token),\n      Address.Canonical!(pair_info.liquidity_token),\n      asset_infos=tmp_pair_info.asset_infos,\n      asset_decimals=tmp_pair_info.asset_decimals\n    )\n    emit PostInstantiate(pair_contract, pair_info.liquidity_token)\n  }\n\n  exec #create_pair(asset_infos: AssetInfo[2]) {\n    if asset_infos[0] == asset_infos[1] {\n      fail! "same asset"\n    }\n\n    let asset_1_decimal = query_decimals!($env.contract.address, asset_infos[0])\n    let asset_2_decimal = query_decimals!($env.contract.address, asset_infos[1])\n    let asset_decimals = [asset_1_decimal, asset_2_decimal]\n\n    let pair_key = String!(asset_infos[0]) + String!(asset_infos[1])\n\n    if pair_key in $state.pairs {\n      fail! "Pair already exists"\n    }\n\n    $state.tmp_pair_info = TmpPairInfo { pair_key, asset_infos, asset_decimals }\n    emit CreatePair(asset_infos[0], asset_infos[1])\n\n    @gas_limit(5000000)\n    @reply.on_success(post_instantiate)\n    instantiate! #TerraswapPair(asset_infos, $state.config.token_code_id, asset_decimals) {\n      code_id: $state.config.pair_code_id,\n      admin: $env.contract.address,\n      label: "pair"\n    }\n  }\n\n  exec #add_native_token_decimals(denom: String, decimals: U8) {\n    if $info.sender != $state.config.owner {\n      fail! Unauthorized()\n    }\n\n    let balance = query! Bank.#balance($env.contract.address, denom)\n\n    if balance.amount == 0 {\n      fail! "A balance greater than zero is required by the factory for verification"\n    }\n\n    $state.allow_native_tokens[denom] = decimals\n    emit AddAllowNativeToken(denom, decimals)\n  }\n\n  query #config() {\n    return $state.config\n  }\n\n  query #pair(asset_infos: AssetInfo[2]) {\n    let pairs = $state.pairs[asset_infos]\n    return { pairs }\n  }\n\n  query #native_token_decimal(denom: String) {\n    let decimals = $state.allow_native_tokens[denom]\n    return { decimals }\n  }\n\n}\n')))}f.isMDXComponent=!0}}]);