"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[9671],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>g});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=c(n),m=i,g=d["".concat(l,".").concat(m)]||d[m]||u[m]||o;return n?r.createElement(g,a(a({ref:t},p),{},{components:n})):r.createElement(g,a({ref:t},p))}));function g(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,a=new Array(o);a[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[d]="string"==typeof e?e:i,a[1]=s;for(var c=2;c<o;c++)a[c]=n[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},9881:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var r=n(7462),i=(n(7294),n(3905));const o={sidebar_position:1},a="Introduction",s={unversionedId:"intro",id:"intro",title:"Introduction",description:"CWScript is a programming language specifically designed for developing CosmWasm smart contracts. It aims to simplify",source:"@site/docs/intro.md",sourceDirName:".",slug:"/intro",permalink:"/cwscript-docs/docs/intro",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/intro.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"docsSidebar",next:{title:"Getting Started",permalink:"/cwscript-docs/docs/installation"}},l={},c=[{value:"CosmWasm: Potential and Challenges",id:"cosmwasm-potential-and-challenges",level:3},{value:"Design Philosophy",id:"design-philosophy",level:2},{value:"Future Goals",id:"future-goals",level:2}],p={toc:c},d="wrapper";function u(e){let{components:t,...n}=e;return(0,i.kt)(d,(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"introduction"},"Introduction"),(0,i.kt)("p",null,"CWScript is a programming language specifically designed for developing CosmWasm smart contracts. It aims to simplify\nthe development process by providing a more accessible syntax and improving the developer experience."),(0,i.kt)("h3",{id:"cosmwasm-potential-and-challenges"},"CosmWasm: Potential and Challenges"),(0,i.kt)("p",null,"CosmWasm is a powerful and innovative platform with numerous advantages such as enhanced security compared to EVM, an\nelegant message-passing design, and core interchain capabilities. Despite these benefits, CosmWasm's adoption is\nhindered by challenges in the Rust-based ecosystem. Newcomers often find the learning curve steep, while the developer\nexperience is hindered by inadequate documentation, lack of guidance on best practices, poor standardization, and\ninsufficient models for composability and building large programs. CWScript addresses these challenges by offering a\nsimplified syntax that clearly communicates the intent of the program."),(0,i.kt)("h2",{id:"design-philosophy"},"Design Philosophy"),(0,i.kt)("p",null,"CWScript is designed to reduce syntactic noise and create a seamless experience for developers. It translates high-level\nCWScript code into high-quality idiomatic CosmWasm Rust patterns. The language's design goals center around a\ntooling-first approach, meaning that CWScript is built with tooling developers in mind. It exposes the compiler\ninterface, enabling the development of new tools for deep introspection and manipulation of smart contract logic. The\nsimplicity of CWScript allows developers to focus on the complexity of their ideas, rather than wrestling with syntax."),(0,i.kt)("h2",{id:"future-goals"},"Future Goals"),(0,i.kt)("p",null,"CWScript aims to achieve several future goals, including:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Generating optimized Rust output that surpasses human-written code"),(0,i.kt)("li",{parentName:"ol"},"Working seamlessly alongside Rust to maintain compatibility with the existing Rust ecosystem"),(0,i.kt)("li",{parentName:"ol"},"Extending the language through Rust for added functionality")),(0,i.kt)("p",null,"These goals will empower developers to leverage the best of both worlds: the simplicity of CWScript and the robustness\nof Rust."))}u.isMDXComponent=!0}}]);